<?xml version="1.0" encoding="UTF-8"?><driver-configuration config-type="app-config" dn="cn=rbpm,cn=driverset1,o=system" driver-set-dn="cn=driverset1,o=system" name="rbpm">
    <children>
        <provisioning>
            <ds-object ds-object-class="srvprvAppConfig" ds-object-name="AppConfig">
                <ds-attribute ds-attr-name="Version">
                    <ds-value>4.5</ds-value>
                </ds-attribute>
                <ds-attribute ds-attr-name="srvprvPlugins">
                    <ds-value><![CDATA[PG1vZHVsZXM+PG1vZHVsZSBuYW1lPSJSb2xlcyIgdmVyc2lvbj0iMS4wIjEuMCIvPjwvbW9kdWxlcz4=]]></ds-value>
                </ds-attribute>
                <ds-object ds-object-class="nrfAuthTypes" ds-object-name="AuthTypes">
                    <ds-attributes/>
                </ds-object>
                <ds-object ds-object-class="nrfUIConfig" ds-object-name="UIConfig">
                    <ds-attributes/>
                    <ds-object ds-object-class="nrfNavItems" ds-object-name="NavItems">
                        <ds-attributes/>
                    </ds-object>
                </ds-object>
                <ds-object ds-object-class="srvprvAppDefs" ds-object-name="AppDefs">
                    <ds-attributes/>
                </ds-object>
                <ds-object ds-object-class="srvprvDirectoryModel" ds-object-name="DirectoryModel">
                    <ds-attributes/>
                    <ds-object ds-object-class="srvprvChoiceDefs" ds-object-name="ChoiceDefs">
                        <ds-attributes/>
                    </ds-object>
                    <ds-object ds-object-class="srvprvEntityDefs" ds-object-name="EntityDefs">
                        <ds-attributes/>
                    </ds-object>
                    <ds-object ds-object-class="srvprvQueryDefs" ds-object-name="QueryDefs">
                        <ds-attributes/>
                    </ds-object>
                    <ds-object ds-object-class="srvprvRelationshipDefs" ds-object-name="RelationshipDefs">
                        <ds-attributes/>
                    </ds-object>
                </ds-object>
                <ds-object ds-object-class="srvprvRequestDefs" ds-object-name="RequestDefs">
                    <ds-attributes/>
                    <ds-object ds-object-class="srvprvRequest" ds-object-name="TestPRD">
                        <ds-attributes>
                            <ds-attribute ds-attr-name="Description">
                                <ds-value>Test</ds-value>
                            </ds-attribute>
                            <ds-attribute ds-attr-name="srvprvStatus">
                                <ds-value>Active</ds-value>
                            </ds-attribute>
                            <ds-attribute ds-attr-name="srvprvFlowStrategy">
                                <ds-value>SingleFlow</ds-value>
                            </ds-attribute>
                            <ds-attribute ds-attr-name="srvprvGrant">
                                <ds-value>true</ds-value>
                            </ds-attribute>
                            <ds-attribute ds-attr-name="srvprvRevoke">
                                <ds-value>false</ds-value>
                            </ds-attribute>
                            <ds-attribute ds-attr-name="srvprvCategoryKey">
                                <ds-value>entitlements</ds-value>
                            </ds-attribute>
                            <ds-attribute ds-attr-name="srvprvLocalizedNames">
                                <ds-value>en~TestPRD</ds-value>
                            </ds-attribute>
                            <ds-attribute ds-attr-name="srvprvLocalizedDescrs">
                                <ds-value>en~Test</ds-value>
                            </ds-attribute>
                            <ds-attribute ds-attr-name="XMLData">
                                <ds-value><![CDATA[]]></ds-value>
                            </ds-attribute>
                            <ds-attribute ds-attr-name="srvprvRequestXML">
                                <ds-value><![CDATA[]]></ds-value>
                            </ds-attribute>
                            <ds-attribute ds-attr-name="srvprvProcessXML">
                                <ds-value><![CDATA[]]></ds-value>
                            </ds-attribute>
                        </ds-attributes>
                    </ds-object>
                </ds-object>
                <ds-object ds-object-class="nrfConfig" ds-object-name="RoleConfig">
                    <ds-attributes/>
                    <ds-object ds-object-class="nrfAttestations" ds-object-name="Attestations">
                        <ds-attributes/>
                    </ds-object>
                    <ds-object ds-object-class="nrfReportDefs" ds-object-name="ReportDefs">
                        <ds-attributes/>
                    </ds-object>
                    <ds-object ds-object-class="nrfResourceDefs" ds-object-name="ResourceDefs">
                        <ds-attributes/>
                    </ds-object>
                    <ds-object ds-object-class="nrfRoleDefs" ds-object-name="RoleDefs">
                        <ds-attributes/>
                        <ds-object ds-object-class="nrfRoleDefs" ds-object-name="Level10">
                            <ds-attributes/>
                        </ds-object>
                        <ds-object ds-object-class="nrfRoleDefs" ds-object-name="Level20">
                            <ds-attributes/>
                            <ds-object ds-object-class="nrfRoleDefs" ds-object-name="System">
                                <ds-attributes/>
                            </ds-object>
                        </ds-object>
                        <ds-object ds-object-class="nrfRoleDefs" ds-object-name="Level30">
                            <ds-attributes/>
                        </ds-object>
                    </ds-object>
                    <ds-object ds-object-class="nrfResourceAssociations" ds-object-name="ResourceAssociations">
                        <ds-attributes/>
                    </ds-object>
                    <ds-object ds-object-class="nrfResourceRequests" ds-object-name="ResourceRequests">
                        <ds-attributes/>
                    </ds-object>
                    <ds-object ds-object-class="nrfSODDefs" ds-object-name="SoDDefs">
                        <ds-attributes/>
                    </ds-object>
                </ds-object>
                <ds-object ds-object-class="srvprvTeamDefs" ds-object-name="TeamDefs">
                    <ds-attributes/>
                </ds-object>
            </ds-object>
        </provisioning>
    </children></driver-configuration>